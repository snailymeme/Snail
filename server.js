require('dotenv').config();
const express = require('express');
const { Telegraf } = require('telegraf');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvs = ['TELEGRAM_BOT_TOKEN', 'WEBAPP_URL', 'PORT', 'WEBHOOK_PATH'];
for (const env of requiredEnvs) {
    if (!process.env[env]) {
        console.error(`–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ${env}`);
        process.exit(1);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const port = process.env.PORT || 443;
const webhookPath = process.env.WEBHOOK_PATH || '/webhook';
let isReady = false;
let startTime = Date.now();
let bot = null;

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(express.json());

// –ë–∞–∑–æ–≤—ã–π healthcheck
app.get('/', (req, res) => {
    console.log('Healthcheck –∑–∞–ø—Ä–æ—à–µ–Ω:', {
        isReady,
        uptime: Math.floor((Date.now() - startTime) / 1000),
        botInitialized: !!bot
    });

    res.status(200).json({
        status: isReady ? 'ready' : 'starting',
        uptime: Math.floor((Date.now() - startTime) / 1000),
        botInitialized: !!bot,
        timestamp: new Date().toISOString()
    });
});

// Webhook endpoint
app.post(webhookPath, express.json(), (req, res) => {
    console.log('Webhook –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    
    if (!bot || !isReady) {
        console.log('Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤:', { botInitialized: !!bot, isReady });
        return res.status(200).json({ ok: false, error: 'Bot is starting' });
    }

    bot.handleUpdate(req.body, res);
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async function initializeBot() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞...');
        
        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        console.log('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        bot.command('start', ctx => {
            return ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:', {
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.WEBAPP_URL } }
                    ]]
                }
            });
        });

        bot.command('ping', ctx => ctx.reply('pong'));
        
        console.log('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        const webhookUrl = `${process.env.WEBAPP_URL}${webhookPath}`;
        await bot.telegram.setWebhook(webhookUrl);
        console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        const webhookInfo = await bot.telegram.getWebhookInfo();
        console.log('Webhook info:', webhookInfo);

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
    port,
    webhookPath,
    webappUrl: process.env.WEBAPP_URL
});

const server = app.listen(port, async () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        const success = await initializeBot();
        
        if (success) {
            isReady = true;
            console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
            process.exit(1);
        }
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        process.exit(1);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
});

// Graceful shutdown
const shutdown = () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
    isReady = false;
    server.close(() => {
        console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        if (bot) {
            bot.stop('SIGTERM');
            console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        process.exit(0);
    });
};

process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown); 