import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    try {
        await ctx.reply(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã Snail to Riches üêå\n\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/race - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É\n' +
            '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω–æ–∫\n' +
            '/help - –ü–æ–º–æ—â—å',
            {
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üéÆ –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É', callback_data: 'start_race' }
                    ]]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /race
bot.command('race', async (ctx) => {
    try {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ–Ω–∫–∏:',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üèÉ –û–±—ã—á–Ω–∞—è –≥–æ–Ω–∫–∞', callback_data: 'race_normal' },
                            { text: 'üéØ –¢—É—Ä–Ω–∏—Ä', callback_data: 'race_tournament' }
                        ]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /race:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
bot.command('stats', async (ctx) => {
    try {
        await ctx.reply(
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω–æ–∫:\n\n' +
            '–í—Å–µ–≥–æ –≥–æ–Ω–æ–∫: 0\n' +
            '–ü–æ–±–µ–¥—ã: 0\n' +
            '–ü—Ä–æ–∏–≥—Ä—ã—à–∏: 0\n' +
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 0.0'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
    try {
        await ctx.reply(
            '‚ùì –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ:\n\n' +
            '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏\n' +
            '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ–Ω–∫–∏\n' +
            '3. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n' +
            '4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ–Ω–∫–æ–π\n' +
            '5. –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à!\n\n' +
            '–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
    try {
        const action = ctx.callbackQuery.data;
        
        switch (action) {
            case 'start_race':
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /race –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏');
                break;
            case 'race_normal':
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ç–∫—É –¥–ª—è —Å—Ç–∞–≤–∫–∏:', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üêå RacerSlug', callback_data: 'bet_racer' },
                                { text: 'üåø ExplorerSlug', callback_data: 'bet_explorer' }
                            ],
                            [
                                { text: 'üêç SnakeSlug', callback_data: 'bet_snake' },
                                { text: 'üí™ StubbornSlug', callback_data: 'bet_stubborn' }
                            ]
                        ]
                    }
                });
                break;
            case 'race_tournament':
                await ctx.reply('–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                break;
            default:
                if (action.startsWith('bet_')) {
                    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)');
                }
        }
        
        await ctx.answerCallbackQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

export default bot; 